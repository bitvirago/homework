// Code generated by sqlc. DO NOT EDIT.

package api

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTaskStmt, err = db.PrepareContext(ctx, createTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTask: %w", err)
	}
	if q.deleteTaskStmt, err = db.PrepareContext(ctx, deleteTask); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTask: %w", err)
	}
	if q.finishTaskStmt, err = db.PrepareContext(ctx, finishTask); err != nil {
		return nil, fmt.Errorf("error preparing query FinishTask: %w", err)
	}
	if q.getNextTaskStmt, err = db.PrepareContext(ctx, getNextTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetNextTask: %w", err)
	}
	if q.getTaskStmt, err = db.PrepareContext(ctx, getTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetTask: %w", err)
	}
	if q.getTasksStmt, err = db.PrepareContext(ctx, getTasks); err != nil {
		return nil, fmt.Errorf("error preparing query GetTasks: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTaskStmt != nil {
		if cerr := q.createTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTaskStmt: %w", cerr)
		}
	}
	if q.deleteTaskStmt != nil {
		if cerr := q.deleteTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskStmt: %w", cerr)
		}
	}
	if q.finishTaskStmt != nil {
		if cerr := q.finishTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finishTaskStmt: %w", cerr)
		}
	}
	if q.getNextTaskStmt != nil {
		if cerr := q.getNextTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNextTaskStmt: %w", cerr)
		}
	}
	if q.getTaskStmt != nil {
		if cerr := q.getTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTaskStmt: %w", cerr)
		}
	}
	if q.getTasksStmt != nil {
		if cerr := q.getTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTasksStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db              DBTX
	tx              *sql.Tx
	createTaskStmt  *sql.Stmt
	deleteTaskStmt  *sql.Stmt
	finishTaskStmt  *sql.Stmt
	getNextTaskStmt *sql.Stmt
	getTaskStmt     *sql.Stmt
	getTasksStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:              tx,
		tx:              tx,
		createTaskStmt:  q.createTaskStmt,
		deleteTaskStmt:  q.deleteTaskStmt,
		finishTaskStmt:  q.finishTaskStmt,
		getNextTaskStmt: q.getNextTaskStmt,
		getTaskStmt:     q.getTaskStmt,
		getTasksStmt:    q.getTasksStmt,
	}
}

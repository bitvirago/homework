// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package api

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (
    id, command, status
) VALUES (
             $1, $2, 'queued'
         )
`

type CreateTaskParams struct {
	ID      uuid.UUID      `json:"id"`
	Command sql.NullString `json:"command"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.exec(ctx, q.createTaskStmt, createTask, arg.ID, arg.Command)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteTaskStmt, deleteTask, id)
	return err
}

const finishTask = `-- name: FinishTask :exec
UPDATE tasks SET  started_at = $2, finished_at = $3, status = $4, stdout = $5, stderr = $6, exit_code = $7 WHERE id = $1
`

type FinishTaskParams struct {
	ID         uuid.UUID      `json:"id"`
	StartedAt  sql.NullTime   `json:"startedAt"`
	FinishedAt sql.NullTime   `json:"finishedAt"`
	Status     sql.NullString `json:"status"`
	Stdout     sql.NullString `json:"stdout"`
	Stderr     sql.NullString `json:"stderr"`
	ExitCode   sql.NullInt32  `json:"exitCode"`
}

func (q *Queries) FinishTask(ctx context.Context, arg FinishTaskParams) error {
	_, err := q.exec(ctx, q.finishTaskStmt, finishTask,
		arg.ID,
		arg.StartedAt,
		arg.FinishedAt,
		arg.Status,
		arg.Stdout,
		arg.Stderr,
		arg.ExitCode,
	)
	return err
}

const getNextTask = `-- name: GetNextTask :one
UPDATE tasks
SET status = 'started'
WHERE  id = (
    SELECT id
    FROM   tasks
    WHERE started_at is null
    LIMIT  1
)
RETURNING id, command
`

type GetNextTaskRow struct {
	ID      uuid.UUID      `json:"id"`
	Command sql.NullString `json:"command"`
}

func (q *Queries) GetNextTask(ctx context.Context) (GetNextTaskRow, error) {
	row := q.queryRow(ctx, q.getNextTaskStmt, getNextTask)
	var i GetNextTaskRow
	err := row.Scan(&i.ID, &i.Command)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, command, started_at, finished_at, status, stdout, stderr, exit_code FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.queryRow(ctx, q.getTaskStmt, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.StartedAt,
		&i.FinishedAt,
		&i.Status,
		&i.Stdout,
		&i.Stderr,
		&i.ExitCode,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, command, started_at, finished_at, status, stdout, stderr, exit_code FROM tasks
ORDER BY id
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.query(ctx, q.getTasksStmt, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Command,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Status,
			&i.Stdout,
			&i.Stderr,
			&i.ExitCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

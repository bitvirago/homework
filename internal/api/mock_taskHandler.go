// Code generated by mockery 2.9.4. DO NOT EDIT.

package api

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockTaskHandler is an autogenerated mock type for the taskHandler type
type mockTaskHandler struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, arg
func (_m *mockTaskHandler) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateTaskParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *mockTaskHandler) GetTask(ctx context.Context, id uuid.UUID) (Task, error) {
	ret := _m.Called(ctx, id)

	var r0 Task
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: ctx
func (_m *mockTaskHandler) GetTasks(ctx context.Context) ([]Task, error) {
	ret := _m.Called(ctx)

	var r0 []Task
	if rf, ok := ret.Get(0).(func(context.Context) []Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
